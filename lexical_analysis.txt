Chimera compiler, version 0.1
Copyright Â© 2013 by Andres, Ian, Servio, ITESM CEM.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or later.
This program has absolutely no warranty.

Included in this release:
   * Lexical analysis


===== Tokens from: "test_programs/binary.chimera" =====
[1] {VAR, "var", @(6, 1)}
[2] {IDENTIFIER, "option", @(7, 5)}
[3] {TYPE_DECLARE, ":", @(7, 11)}
[4] {STRING, "string", @(7, 13)}
[5] {END_OF_EXPRESSION, ";", @(7, 19)}
[6] {IDENTIFIER, "num", @(8, 5)}
[7] {TYPE_DECLARE, ":", @(8, 8)}
[8] {INTEGER, "integer", @(8, 10)}
[9] {END_OF_EXPRESSION, ";", @(8, 17)}
[10] {PROCEDURE, "procedure", @(10, 1)}
[11] {IDENTIFIER, "Binary", @(10, 11)}
[12] {PARENTHESIS_OPEN, "(", @(10, 17)}
[13] {IDENTIFIER, "num", @(11, 9)}
[14] {TYPE_DECLARE, ":", @(11, 12)}
[15] {INTEGER, "integer", @(11, 14)}
[16] {END_OF_EXPRESSION, ";", @(11, 21)}
[17] {PARENTHESIS_CLOSE, ")", @(12, 5)}
[18] {TYPE_DECLARE, ":", @(12, 6)}
[19] {STRING, "string", @(12, 8)}
[20] {END_OF_EXPRESSION, ";", @(12, 14)}
[21] {VAR, "var", @(14, 5)}
[22] {IDENTIFIER, "result", @(15, 9)}
[23] {TYPE_DECLARE, ":", @(15, 15)}
[24] {STRING, "string", @(15, 17)}
[25] {END_OF_EXPRESSION, ";", @(15, 23)}
[26] {IDENTIFIER, "remainder", @(16, 9)}
[27] {TYPE_DECLARE, ":", @(16, 18)}
[28] {INTEGER, "integer", @(16, 20)}
[29] {END_OF_EXPRESSION, ";", @(16, 27)}
[30] {BEGIN, "begin", @(18, 5)}
[31] {IF, "if", @(19, 9)}
[32] {IDENTIFIER, "num", @(19, 12)}
[33] {LESS_THAN_EQUAL, "<=", @(19, 16)}
[34] {INT_LITERAL, "0", @(19, 19)}
[35] {THEN, "then", @(19, 21)}
[36] {RETURN, "return", @(20, 13)}
[37] {STRING_LITERAL, ""0"", @(20, 20)}
[38] {END_OF_EXPRESSION, ";", @(20, 23)}
[39] {END, "end", @(21, 9)}
[40] {END_OF_EXPRESSION, ";", @(21, 12)}
[41] {IDENTIFIER, "result", @(23, 9)}
[42] {ASSIGN, ":=", @(23, 16)}
[43] {STRING_LITERAL, """", @(23, 19)}
[44] {END_OF_EXPRESSION, ";", @(23, 21)}
[45] {LOOP, "loop", @(25, 9)}
[46] {IDENTIFIER, "remainder", @(26, 13)}
[47] {ASSIGN, ":=", @(26, 23)}
[48] {IDENTIFIER, "num", @(26, 26)}
[49] {REM, "rem", @(26, 30)}
[50] {INT_LITERAL, "2", @(26, 34)}
[51] {END_OF_EXPRESSION, ";", @(26, 35)}
[52] {IDENTIFIER, "result", @(27, 13)}
[53] {ASSIGN, ":=", @(27, 20)}
[54] {IDENTIFIER, "CatStr", @(27, 23)}
[55] {PARENTHESIS_OPEN, "(", @(27, 29)}
[56] {IDENTIFIER, "IntToStr", @(27, 30)}
[57] {PARENTHESIS_OPEN, "(", @(27, 38)}
[58] {IDENTIFIER, "remainder", @(27, 39)}
[59] {PARENTHESIS_CLOSE, ")", @(27, 48)}
[60] {COMMA, ",", @(27, 49)}
[61] {IDENTIFIER, "result", @(27, 51)}
[62] {PARENTHESIS_CLOSE, ")", @(27, 57)}
[63] {END_OF_EXPRESSION, ";", @(27, 58)}
[64] {IDENTIFIER, "num", @(28, 13)}
[65] {ASSIGN, ":=", @(28, 17)}
[66] {IDENTIFIER, "num", @(28, 20)}
[67] {DIV, "div", @(28, 24)}
[68] {INT_LITERAL, "2", @(28, 28)}
[69] {END_OF_EXPRESSION, ";", @(28, 29)}
[70] {IF, "if", @(29, 13)}
[71] {IDENTIFIER, "num", @(29, 16)}
[72] {EQUAL, "=", @(29, 20)}
[73] {INT_LITERAL, "0", @(29, 22)}
[74] {THEN, "then", @(29, 24)}
[75] {EXIT, "exit", @(29, 29)}
[76] {END_OF_EXPRESSION, ";", @(29, 33)}
[77] {END, "end", @(29, 35)}
[78] {END_OF_EXPRESSION, ";", @(29, 38)}
[79] {END, "end", @(30, 9)}
[80] {END_OF_EXPRESSION, ";", @(30, 12)}
[81] {RETURN, "return", @(32, 9)}
[82] {IDENTIFIER, "result", @(32, 16)}
[83] {END_OF_EXPRESSION, ";", @(32, 22)}
[84] {END, "end", @(33, 5)}
[85] {END_OF_EXPRESSION, ";", @(33, 8)}
[86] {PROGRAM, "program", @(35, 1)}
[87] {LOOP, "loop", @(36, 5)}
[88] {IDENTIFIER, "WrStr", @(37, 9)}
[89] {PARENTHESIS_OPEN, "(", @(37, 14)}
[90] {STRING_LITERAL, ""Input a number: "", @(37, 15)}
[91] {PARENTHESIS_CLOSE, ")", @(37, 33)}
[92] {END_OF_EXPRESSION, ";", @(37, 34)}
[93] {IDENTIFIER, "num", @(38, 9)}
[94] {ASSIGN, ":=", @(38, 13)}
[95] {IDENTIFIER, "RdInt", @(38, 16)}
[96] {PARENTHESIS_OPEN, "(", @(38, 21)}
[97] {PARENTHESIS_CLOSE, ")", @(38, 22)}
[98] {END_OF_EXPRESSION, ";", @(38, 23)}
[99] {IDENTIFIER, "WrStr", @(40, 9)}
[100] {PARENTHESIS_OPEN, "(", @(40, 14)}
[101] {STRING_LITERAL, ""Conversion to binary of that number: "", @(40, 15)}
[102] {PARENTHESIS_CLOSE, ")", @(40, 54)}
[103] {END_OF_EXPRESSION, ";", @(40, 55)}
[104] {IDENTIFIER, "WrStr", @(41, 9)}
[105] {PARENTHESIS_OPEN, "(", @(41, 14)}
[106] {IDENTIFIER, "Binary", @(41, 15)}
[107] {PARENTHESIS_OPEN, "(", @(41, 21)}
[108] {IDENTIFIER, "num", @(41, 22)}
[109] {PARENTHESIS_CLOSE, ")", @(41, 25)}
[110] {PARENTHESIS_CLOSE, ")", @(41, 26)}
[111] {END_OF_EXPRESSION, ";", @(41, 27)}
[112] {IDENTIFIER, "WrLn", @(43, 9)}
[113] {PARENTHESIS_OPEN, "(", @(43, 13)}
[114] {PARENTHESIS_CLOSE, ")", @(43, 14)}
[115] {END_OF_EXPRESSION, ";", @(43, 15)}
[116] {IDENTIFIER, "WrStr", @(45, 9)}
[117] {PARENTHESIS_OPEN, "(", @(45, 14)}
[118] {STRING_LITERAL, ""Convert another number? "", @(45, 15)}
[119] {PARENTHESIS_CLOSE, ")", @(45, 41)}
[120] {END_OF_EXPRESSION, ";", @(45, 42)}
[121] {IDENTIFIER, "option", @(46, 9)}
[122] {ASSIGN, ":=", @(46, 16)}
[123] {IDENTIFIER, "RdStr", @(46, 19)}
[124] {PARENTHESIS_OPEN, "(", @(46, 24)}
[125] {PARENTHESIS_CLOSE, ")", @(46, 25)}
[126] {END_OF_EXPRESSION, ";", @(46, 26)}
[127] {IF, "if", @(48, 9)}
[128] {IDENTIFIER, "LenStr", @(48, 12)}
[129] {PARENTHESIS_OPEN, "(", @(48, 18)}
[130] {IDENTIFIER, "option", @(48, 19)}
[131] {PARENTHESIS_CLOSE, ")", @(48, 25)}
[132] {EQUAL, "=", @(48, 27)}
[133] {INT_LITERAL, "0", @(48, 29)}
[134] {THEN, "then", @(48, 31)}
[135] {IDENTIFIER, "option", @(49, 13)}
[136] {ASSIGN, ":=", @(49, 20)}
[137] {STRING_LITERAL, ""N"", @(49, 23)}
[138] {END_OF_EXPRESSION, ";", @(49, 26)}
[139] {ELSE, "else", @(50, 9)}
[140] {IDENTIFIER, "option", @(51, 13)}
[141] {ASSIGN, ":=", @(51, 20)}
[142] {IDENTIFIER, "AtStr", @(51, 23)}
[143] {PARENTHESIS_OPEN, "(", @(51, 28)}
[144] {IDENTIFIER, "option", @(51, 29)}
[145] {COMMA, ",", @(51, 35)}
[146] {INT_LITERAL, "0", @(51, 37)}
[147] {PARENTHESIS_CLOSE, ")", @(51, 38)}
[148] {END_OF_EXPRESSION, ";", @(51, 39)}
[149] {END, "end", @(52, 9)}
[150] {END_OF_EXPRESSION, ";", @(52, 12)}
[151] {IF, "if", @(54, 9)}
[152] {IDENTIFIER, "CmpStr", @(54, 12)}
[153] {PARENTHESIS_OPEN, "(", @(54, 18)}
[154] {IDENTIFIER, "option", @(54, 19)}
[155] {COMMA, ",", @(54, 25)}
[156] {STRING_LITERAL, ""Y"", @(54, 27)}
[157] {PARENTHESIS_CLOSE, ")", @(54, 30)}
[158] {UNEQUAL, "<>", @(54, 32)}
[159] {INT_LITERAL, "0", @(54, 35)}
[160] {AND, "and", @(54, 37)}
[161] {IDENTIFIER, "CmpStr", @(54, 41)}
[162] {PARENTHESIS_OPEN, "(", @(54, 47)}
[163] {IDENTIFIER, "option", @(54, 48)}
[164] {COMMA, ",", @(54, 54)}
[165] {STRING_LITERAL, ""y"", @(54, 56)}
[166] {PARENTHESIS_CLOSE, ")", @(54, 59)}
[167] {UNEQUAL, "<>", @(54, 61)}
[168] {INT_LITERAL, "0", @(54, 64)}
[169] {THEN, "then", @(54, 66)}
[170] {EXIT, "exit", @(55, 13)}
[171] {END_OF_EXPRESSION, ";", @(55, 17)}
[172] {END, "end", @(56, 9)}
[173] {END_OF_EXPRESSION, ";", @(56, 12)}
[174] {END, "end", @(57, 5)}
[175] {END_OF_EXPRESSION, ";", @(57, 8)}
[176] {END, "end", @(58, 1)}
[177] {END_OF_EXPRESSION, ";", @(58, 4)}
[178] {EOF, "", @(59, 1)}

===== Tokens from: "test_programs/factorial.chimera" =====
[1] {VAR, "var", @(6, 1)}
[2] {IDENTIFIER, "option", @(7, 5)}
[3] {TYPE_DECLARE, ":", @(7, 11)}
[4] {STRING, "string", @(7, 13)}
[5] {END_OF_EXPRESSION, ";", @(7, 19)}
[6] {IDENTIFIER, "num", @(8, 5)}
[7] {TYPE_DECLARE, ":", @(8, 8)}
[8] {INTEGER, "integer", @(8, 10)}
[9] {END_OF_EXPRESSION, ";", @(8, 17)}
[10] {PROCEDURE, "procedure", @(10, 1)}
[11] {IDENTIFIER, "IterativeFactorial", @(10, 11)}
[12] {PARENTHESIS_OPEN, "(", @(10, 29)}
[13] {IDENTIFIER, "n", @(11, 9)}
[14] {TYPE_DECLARE, ":", @(11, 10)}
[15] {INTEGER, "integer", @(11, 12)}
[16] {END_OF_EXPRESSION, ";", @(11, 19)}
[17] {PARENTHESIS_CLOSE, ")", @(12, 5)}
[18] {TYPE_DECLARE, ":", @(12, 6)}
[19] {INTEGER, "integer", @(12, 8)}
[20] {END_OF_EXPRESSION, ";", @(12, 15)}
[21] {VAR, "var", @(14, 5)}
[22] {IDENTIFIER, "i", @(15, 9)}
[23] {COMMA, ",", @(15, 10)}
[24] {IDENTIFIER, "r", @(15, 12)}
[25] {TYPE_DECLARE, ":", @(15, 13)}
[26] {INTEGER, "integer", @(15, 15)}
[27] {END_OF_EXPRESSION, ";", @(15, 22)}
[28] {BEGIN, "begin", @(17, 5)}
[29] {IDENTIFIER, "r", @(18, 9)}
[30] {ASSIGN, ":=", @(18, 11)}
[31] {INT_LITERAL, "1", @(18, 14)}
[32] {END_OF_EXPRESSION, ";", @(18, 15)}
[33] {IDENTIFIER, "i", @(19, 9)}
[34] {ASSIGN, ":=", @(19, 11)}
[35] {INT_LITERAL, "2", @(19, 14)}
[36] {END_OF_EXPRESSION, ";", @(19, 15)}
[37] {LOOP, "loop", @(21, 9)}
[38] {IF, "if", @(22, 13)}
[39] {IDENTIFIER, "i", @(22, 16)}
[40] {MORE_THAN, ">", @(22, 18)}
[41] {IDENTIFIER, "n", @(22, 20)}
[42] {THEN, "then", @(22, 22)}
[43] {EXIT, "exit", @(22, 27)}
[44] {END_OF_EXPRESSION, ";", @(22, 31)}
[45] {END, "end", @(22, 33)}
[46] {END_OF_EXPRESSION, ";", @(22, 36)}
[47] {IDENTIFIER, "r", @(23, 13)}
[48] {ASSIGN, ":=", @(23, 15)}
[49] {IDENTIFIER, "r", @(23, 18)}
[50] {TIMES, "*", @(23, 20)}
[51] {IDENTIFIER, "i", @(23, 22)}
[52] {END_OF_EXPRESSION, ";", @(23, 23)}
[53] {IDENTIFIER, "i", @(24, 13)}
[54] {ASSIGN, ":=", @(24, 15)}
[55] {IDENTIFIER, "i", @(24, 18)}
[56] {PLUS, "+", @(24, 20)}
[57] {INT_LITERAL, "1", @(24, 22)}
[58] {END_OF_EXPRESSION, ";", @(24, 23)}
[59] {END, "end", @(25, 9)}
[60] {END_OF_EXPRESSION, ";", @(25, 12)}
[61] {RETURN, "return", @(27, 9)}
[62] {IDENTIFIER, "r", @(27, 16)}
[63] {END_OF_EXPRESSION, ";", @(27, 17)}
[64] {END, "end", @(28, 5)}
[65] {END_OF_EXPRESSION, ";", @(28, 8)}
[66] {PROCEDURE, "procedure", @(30, 1)}
[67] {IDENTIFIER, "RecursiveFactorial", @(30, 11)}
[68] {PARENTHESIS_OPEN, "(", @(30, 29)}
[69] {IDENTIFIER, "n", @(31, 9)}
[70] {TYPE_DECLARE, ":", @(31, 10)}
[71] {INTEGER, "integer", @(31, 12)}
[72] {END_OF_EXPRESSION, ";", @(31, 19)}
[73] {PARENTHESIS_CLOSE, ")", @(32, 5)}
[74] {TYPE_DECLARE, ":", @(32, 6)}
[75] {INTEGER, "integer", @(32, 7)}
[76] {END_OF_EXPRESSION, ";", @(32, 14)}
[77] {BEGIN, "begin", @(34, 5)}
[78] {IF, "if", @(35, 9)}
[79] {IDENTIFIER, "n", @(35, 12)}
[80] {LESS_THAN_EQUAL, "<=", @(35, 14)}
[81] {INT_LITERAL, "1", @(35, 17)}
[82] {THEN, "then", @(35, 19)}
[83] {RETURN, "return", @(36, 13)}
[84] {INT_LITERAL, "1", @(36, 20)}
[85] {END_OF_EXPRESSION, ";", @(36, 21)}
[86] {ELSE, "else", @(37, 9)}
[87] {RETURN, "return", @(38, 13)}
[88] {IDENTIFIER, "n", @(38, 20)}
[89] {TIMES, "*", @(38, 22)}
[90] {IDENTIFIER, "RecursiveFactorial", @(38, 24)}
[91] {PARENTHESIS_OPEN, "(", @(38, 42)}
[92] {IDENTIFIER, "n", @(38, 43)}
[93] {MINUS, "-", @(38, 45)}
[94] {INT_LITERAL, "1", @(38, 47)}
[95] {PARENTHESIS_CLOSE, ")", @(38, 48)}
[96] {END_OF_EXPRESSION, ";", @(38, 49)}
[97] {END, "end", @(39, 9)}
[98] {END_OF_EXPRESSION, ";", @(39, 12)}
[99] {END, "end", @(40, 5)}
[100] {END_OF_EXPRESSION, ";", @(40, 8)}
[101] {PROGRAM, "program", @(42, 1)}
[102] {LOOP, "loop", @(43, 5)}
[103] {IDENTIFIER, "WrStr", @(44, 9)}
[104] {PARENTHESIS_OPEN, "(", @(44, 14)}
[105] {STRING_LITERAL, ""Input a number: "", @(44, 15)}
[106] {PARENTHESIS_CLOSE, ")", @(44, 33)}
[107] {END_OF_EXPRESSION, ";", @(44, 34)}
[108] {IDENTIFIER, "num", @(45, 9)}
[109] {ASSIGN, ":=", @(45, 13)}
[110] {IDENTIFIER, "RdInt", @(45, 16)}
[111] {PARENTHESIS_OPEN, "(", @(45, 21)}
[112] {PARENTHESIS_CLOSE, ")", @(45, 22)}
[113] {END_OF_EXPRESSION, ";", @(45, 23)}
[114] {IDENTIFIER, "WrStr", @(47, 9)}
[115] {PARENTHESIS_OPEN, "(", @(47, 14)}
[116] {STRING_LITERAL, ""Iterative factorial: "", @(47, 15)}
[117] {PARENTHESIS_CLOSE, ")", @(47, 38)}
[118] {END_OF_EXPRESSION, ";", @(47, 39)}
[119] {IDENTIFIER, "WrInt", @(48, 9)}
[120] {PARENTHESIS_OPEN, "(", @(48, 14)}
[121] {IDENTIFIER, "IterativeFactorial", @(48, 15)}
[122] {PARENTHESIS_OPEN, "(", @(48, 33)}
[123] {IDENTIFIER, "num", @(48, 34)}
[124] {PARENTHESIS_CLOSE, ")", @(48, 37)}
[125] {PARENTHESIS_CLOSE, ")", @(48, 38)}
[126] {END_OF_EXPRESSION, ";", @(48, 39)}
[127] {IDENTIFIER, "WrLn", @(50, 9)}
[128] {PARENTHESIS_OPEN, "(", @(50, 13)}
[129] {PARENTHESIS_CLOSE, ")", @(50, 14)}
[130] {END_OF_EXPRESSION, ";", @(50, 15)}
[131] {IDENTIFIER, "WrStr", @(52, 9)}
[132] {PARENTHESIS_OPEN, "(", @(52, 14)}
[133] {STRING_LITERAL, ""Recursive factorial: "", @(52, 15)}
[134] {PARENTHESIS_CLOSE, ")", @(52, 38)}
[135] {END_OF_EXPRESSION, ";", @(52, 39)}
[136] {IDENTIFIER, "WrInt", @(53, 9)}
[137] {PARENTHESIS_OPEN, "(", @(53, 14)}
[138] {IDENTIFIER, "RecursiveFactorial", @(53, 15)}
[139] {PARENTHESIS_OPEN, "(", @(53, 33)}
[140] {IDENTIFIER, "num", @(53, 34)}
[141] {PARENTHESIS_CLOSE, ")", @(53, 37)}
[142] {PARENTHESIS_CLOSE, ")", @(53, 38)}
[143] {END_OF_EXPRESSION, ";", @(53, 39)}
[144] {IDENTIFIER, "WrLn", @(55, 9)}
[145] {PARENTHESIS_OPEN, "(", @(55, 13)}
[146] {PARENTHESIS_CLOSE, ")", @(55, 14)}
[147] {END_OF_EXPRESSION, ";", @(55, 15)}
[148] {IDENTIFIER, "WrStr", @(57, 9)}
[149] {PARENTHESIS_OPEN, "(", @(57, 14)}
[150] {STRING_LITERAL, ""Compute another factorial? "", @(57, 15)}
[151] {PARENTHESIS_CLOSE, ")", @(57, 44)}
[152] {END_OF_EXPRESSION, ";", @(57, 45)}
[153] {IDENTIFIER, "option", @(58, 9)}
[154] {ASSIGN, ":=", @(58, 16)}
[155] {IDENTIFIER, "RdStr", @(58, 19)}
[156] {PARENTHESIS_OPEN, "(", @(58, 24)}
[157] {PARENTHESIS_CLOSE, ")", @(58, 25)}
[158] {END_OF_EXPRESSION, ";", @(58, 26)}
[159] {IF, "if", @(60, 9)}
[160] {IDENTIFIER, "LenStr", @(60, 12)}
[161] {PARENTHESIS_OPEN, "(", @(60, 18)}
[162] {IDENTIFIER, "option", @(60, 19)}
[163] {PARENTHESIS_CLOSE, ")", @(60, 25)}
[164] {EQUAL, "=", @(60, 27)}
[165] {INT_LITERAL, "0", @(60, 29)}
[166] {THEN, "then", @(60, 31)}
[167] {IDENTIFIER, "option", @(61, 13)}
[168] {ASSIGN, ":=", @(61, 20)}
[169] {STRING_LITERAL, ""N"", @(61, 23)}
[170] {END_OF_EXPRESSION, ";", @(61, 26)}
[171] {ELSE, "else", @(62, 9)}
[172] {IDENTIFIER, "option", @(63, 13)}
[173] {ASSIGN, ":=", @(63, 20)}
[174] {IDENTIFIER, "AtStr", @(63, 23)}
[175] {PARENTHESIS_OPEN, "(", @(63, 28)}
[176] {IDENTIFIER, "option", @(63, 29)}
[177] {COMMA, ",", @(63, 35)}
[178] {INT_LITERAL, "0", @(63, 37)}
[179] {PARENTHESIS_CLOSE, ")", @(63, 38)}
[180] {END_OF_EXPRESSION, ";", @(63, 39)}
[181] {END, "end", @(64, 9)}
[182] {END_OF_EXPRESSION, ";", @(64, 12)}
[183] {IF, "if", @(66, 9)}
[184] {IDENTIFIER, "CmpStr", @(66, 12)}
[185] {PARENTHESIS_OPEN, "(", @(66, 18)}
[186] {IDENTIFIER, "option", @(66, 19)}
[187] {COMMA, ",", @(66, 25)}
[188] {STRING_LITERAL, ""Y"", @(66, 27)}
[189] {PARENTHESIS_CLOSE, ")", @(66, 30)}
[190] {UNEQUAL, "<>", @(66, 32)}
[191] {INT_LITERAL, "0", @(66, 35)}
[192] {AND, "and", @(66, 37)}
[193] {IDENTIFIER, "CmpStr", @(66, 41)}
[194] {PARENTHESIS_OPEN, "(", @(66, 47)}
[195] {IDENTIFIER, "option", @(66, 48)}
[196] {COMMA, ",", @(66, 54)}
[197] {STRING_LITERAL, ""y"", @(66, 56)}
[198] {PARENTHESIS_CLOSE, ")", @(66, 59)}
[199] {UNEQUAL, "<>", @(66, 61)}
[200] {INT_LITERAL, "0", @(66, 64)}
[201] {THEN, "then", @(66, 66)}
[202] {EXIT, "exit", @(67, 13)}
[203] {END_OF_EXPRESSION, ";", @(67, 17)}
[204] {END, "end", @(68, 9)}
[205] {END_OF_EXPRESSION, ";", @(68, 12)}
[206] {END, "end", @(69, 5)}
[207] {END_OF_EXPRESSION, ";", @(69, 8)}
[208] {END, "end", @(70, 1)}
[209] {END_OF_EXPRESSION, ";", @(70, 4)}
[210] {EOF, "", @(71, 1)}

===== Tokens from: "test_programs/hello.chimera" =====
[1] {PROGRAM, "program", @(6, 1)}
[2] {IDENTIFIER, "WrStr", @(7, 5)}
[3] {PARENTHESIS_OPEN, "(", @(7, 10)}
[4] {STRING_LITERAL, ""Hello, World!"", @(7, 11)}
[5] {PARENTHESIS_CLOSE, ")", @(7, 26)}
[6] {END_OF_EXPRESSION, ";", @(7, 27)}
[7] {IDENTIFIER, "WrLn", @(8, 5)}
[8] {PARENTHESIS_OPEN, "(", @(8, 9)}
[9] {PARENTHESIS_CLOSE, ")", @(8, 10)}
[10] {END_OF_EXPRESSION, ";", @(8, 11)}
[11] {END, "end", @(9, 1)}
[12] {END_OF_EXPRESSION, ";", @(9, 4)}
[13] {EOF, "", @(10, 1)}

===== Tokens from: "test_programs/lists.chimera" =====
[1] {VAR, "var", @(6, 1)}
[2] {IDENTIFIER, "lst", @(7, 5)}
[3] {TYPE_DECLARE, ":", @(7, 8)}
[4] {LIST, "list", @(7, 10)}
[5] {OF, "of", @(7, 15)}
[6] {INTEGER, "integer", @(7, 18)}
[7] {END_OF_EXPRESSION, ";", @(7, 25)}
[8] {IDENTIFIER, "one", @(8, 5)}
[9] {COMMA, ",", @(8, 8)}
[10] {IDENTIFIER, "two", @(8, 10)}
[11] {TYPE_DECLARE, ":", @(8, 13)}
[12] {INTEGER, "integer", @(8, 15)}
[13] {END_OF_EXPRESSION, ";", @(8, 22)}
[14] {IDENTIFIER, "s", @(9, 5)}
[15] {TYPE_DECLARE, ":", @(9, 6)}
[16] {STRING, "string", @(9, 8)}
[17] {END_OF_EXPRESSION, ";", @(9, 14)}
[18] {PROCEDURE, "procedure", @(11, 1)}
[19] {IDENTIFIER, "Print", @(11, 11)}
[20] {PARENTHESIS_OPEN, "(", @(11, 16)}
[21] {IDENTIFIER, "lst", @(12, 9)}
[22] {TYPE_DECLARE, ":", @(12, 12)}
[23] {LIST, "list", @(12, 14)}
[24] {OF, "of", @(12, 19)}
[25] {INTEGER, "integer", @(12, 22)}
[26] {END_OF_EXPRESSION, ";", @(12, 29)}
[27] {PARENTHESIS_CLOSE, ")", @(13, 5)}
[28] {END_OF_EXPRESSION, ";", @(13, 6)}
[29] {VAR, "var", @(15, 5)}
[30] {IDENTIFIER, "i", @(16, 9)}
[31] {TYPE_DECLARE, ":", @(16, 10)}
[32] {INTEGER, "integer", @(16, 12)}
[33] {END_OF_EXPRESSION, ";", @(16, 19)}
[34] {IDENTIFIER, "first", @(17, 9)}
[35] {TYPE_DECLARE, ":", @(17, 14)}
[36] {BOOLEAN, "boolean", @(17, 16)}
[37] {END_OF_EXPRESSION, ";", @(17, 23)}
[38] {BEGIN, "begin", @(19, 5)}
[39] {IDENTIFIER, "first", @(20, 9)}
[40] {ASSIGN, ":=", @(20, 15)}
[41] {TRUE, "true", @(20, 18)}
[42] {END_OF_EXPRESSION, ";", @(20, 22)}
[43] {IDENTIFIER, "WrStr", @(21, 9)}
[44] {PARENTHESIS_OPEN, "(", @(21, 14)}
[45] {STRING_LITERAL, ""{"", @(21, 15)}
[46] {PARENTHESIS_CLOSE, ")", @(21, 18)}
[47] {END_OF_EXPRESSION, ";", @(21, 19)}
[48] {FOR, "for", @(22, 9)}
[49] {IDENTIFIER, "i", @(22, 13)}
[50] {IN, "in", @(22, 15)}
[51] {IDENTIFIER, "lst", @(22, 18)}
[52] {DO, "do", @(22, 22)}
[53] {IF, "if", @(23, 13)}
[54] {IDENTIFIER, "first", @(23, 16)}
[55] {THEN, "then", @(23, 22)}
[56] {IDENTIFIER, "first", @(24, 17)}
[57] {ASSIGN, ":=", @(24, 23)}
[58] {FALSE, "false", @(24, 26)}
[59] {END_OF_EXPRESSION, ";", @(24, 31)}
[60] {ELSE, "else", @(25, 13)}
[61] {IDENTIFIER, "WrStr", @(26, 17)}
[62] {PARENTHESIS_OPEN, "(", @(26, 22)}
[63] {STRING_LITERAL, "", "", @(26, 23)}
[64] {PARENTHESIS_CLOSE, ")", @(26, 27)}
[65] {END_OF_EXPRESSION, ";", @(26, 28)}
[66] {END, "end", @(27, 13)}
[67] {END_OF_EXPRESSION, ";", @(27, 16)}
[68] {IDENTIFIER, "WrInt", @(28, 13)}
[69] {PARENTHESIS_OPEN, "(", @(28, 18)}
[70] {IDENTIFIER, "i", @(28, 19)}
[71] {PARENTHESIS_CLOSE, ")", @(28, 20)}
[72] {END_OF_EXPRESSION, ";", @(28, 21)}
[73] {END, "end", @(29, 9)}
[74] {END_OF_EXPRESSION, ";", @(29, 12)}
[75] {IDENTIFIER, "WrStr", @(30, 9)}
[76] {PARENTHESIS_OPEN, "(", @(30, 14)}
[77] {STRING_LITERAL, ""}"", @(30, 15)}
[78] {PARENTHESIS_CLOSE, ")", @(30, 18)}
[79] {END_OF_EXPRESSION, ";", @(30, 19)}
[80] {END, "end", @(31, 5)}
[81] {END_OF_EXPRESSION, ";", @(31, 8)}
[82] {PROCEDURE, "procedure", @(33, 1)}
[83] {IDENTIFIER, "Sum", @(33, 11)}
[84] {PARENTHESIS_OPEN, "(", @(33, 14)}
[85] {IDENTIFIER, "lst", @(34, 9)}
[86] {TYPE_DECLARE, ":", @(34, 12)}
[87] {LIST, "list", @(34, 14)}
[88] {OF, "of", @(34, 19)}
[89] {INTEGER, "integer", @(34, 22)}
[90] {END_OF_EXPRESSION, ";", @(34, 29)}
[91] {PARENTHESIS_CLOSE, ")", @(35, 5)}
[92] {TYPE_DECLARE, ":", @(35, 6)}
[93] {INTEGER, "integer", @(35, 8)}
[94] {END_OF_EXPRESSION, ";", @(35, 15)}
[95] {VAR, "var", @(37, 5)}
[96] {IDENTIFIER, "i", @(38, 9)}
[97] {COMMA, ",", @(38, 10)}
[98] {IDENTIFIER, "sum", @(38, 12)}
[99] {TYPE_DECLARE, ":", @(38, 15)}
[100] {INTEGER, "integer", @(38, 17)}
[101] {END_OF_EXPRESSION, ";", @(38, 24)}
[102] {BEGIN, "begin", @(40, 5)}
[103] {IDENTIFIER, "sum", @(41, 9)}
[104] {ASSIGN, ":=", @(41, 13)}
[105] {INT_LITERAL, "0", @(41, 16)}
[106] {END_OF_EXPRESSION, ";", @(41, 17)}
[107] {FOR, "for", @(43, 9)}
[108] {IDENTIFIER, "i", @(43, 13)}
[109] {IN, "in", @(43, 15)}
[110] {IDENTIFIER, "lst", @(43, 18)}
[111] {DO, "do", @(43, 22)}
[112] {IDENTIFIER, "sum", @(44, 13)}
[113] {ASSIGN, ":=", @(44, 17)}
[114] {IDENTIFIER, "sum", @(44, 20)}
[115] {PLUS, "+", @(44, 24)}
[116] {IDENTIFIER, "i", @(44, 26)}
[117] {END_OF_EXPRESSION, ";", @(44, 27)}
[118] {END, "end", @(45, 9)}
[119] {END_OF_EXPRESSION, ";", @(45, 12)}
[120] {RETURN, "return", @(47, 9)}
[121] {IDENTIFIER, "sum", @(47, 16)}
[122] {END_OF_EXPRESSION, ";", @(47, 19)}
[123] {END, "end", @(48, 5)}
[124] {END_OF_EXPRESSION, ";", @(48, 8)}
[125] {PROCEDURE, "procedure", @(50, 1)}
[126] {IDENTIFIER, "Max", @(50, 11)}
[127] {PARENTHESIS_OPEN, "(", @(50, 14)}
[128] {IDENTIFIER, "lst", @(51, 9)}
[129] {TYPE_DECLARE, ":", @(51, 12)}
[130] {LIST, "list", @(51, 14)}
[131] {OF, "of", @(51, 19)}
[132] {INTEGER, "integer", @(51, 22)}
[133] {END_OF_EXPRESSION, ";", @(51, 29)}
[134] {PARENTHESIS_CLOSE, ")", @(52, 5)}
[135] {TYPE_DECLARE, ":", @(52, 6)}
[136] {INTEGER, "integer", @(52, 8)}
[137] {END_OF_EXPRESSION, ";", @(52, 15)}
[138] {VAR, "var", @(54, 5)}
[139] {IDENTIFIER, "largest", @(55, 9)}
[140] {COMMA, ",", @(55, 16)}
[141] {IDENTIFIER, "i", @(55, 18)}
[142] {COMMA, ",", @(55, 19)}
[143] {IDENTIFIER, "n", @(55, 21)}
[144] {TYPE_DECLARE, ":", @(55, 22)}
[145] {INTEGER, "integer", @(55, 24)}
[146] {END_OF_EXPRESSION, ";", @(55, 31)}
[147] {BEGIN, "begin", @(57, 5)}
[148] {IDENTIFIER, "n", @(58, 9)}
[149] {ASSIGN, ":=", @(58, 11)}
[150] {IDENTIFIER, "LenLstInt", @(58, 14)}
[151] {PARENTHESIS_OPEN, "(", @(58, 23)}
[152] {IDENTIFIER, "lst", @(58, 24)}
[153] {PARENTHESIS_CLOSE, ")", @(58, 27)}
[154] {END_OF_EXPRESSION, ";", @(58, 28)}
[155] {IF, "if", @(60, 9)}
[156] {IDENTIFIER, "n", @(60, 12)}
[157] {EQUAL, "=", @(60, 14)}
[158] {INT_LITERAL, "0", @(60, 16)}
[159] {THEN, "then", @(60, 18)}
[160] {RETURN, "return", @(61, 13)}
[161] {INT_LITERAL, "0", @(61, 20)}
[162] {END_OF_EXPRESSION, ";", @(61, 21)}
[163] {END, "end", @(62, 9)}
[164] {END_OF_EXPRESSION, ";", @(62, 12)}
[165] {IDENTIFIER, "largest", @(64, 9)}
[166] {ASSIGN, ":=", @(64, 17)}
[167] {IDENTIFIER, "lst", @(64, 20)}
[168] {BRACKET_OPEN, "[", @(64, 23)}
[169] {INT_LITERAL, "0", @(64, 24)}
[170] {BRACKET_CLOSE, "]", @(64, 25)}
[171] {END_OF_EXPRESSION, ";", @(64, 26)}
[172] {IDENTIFIER, "i", @(66, 9)}
[173] {ASSIGN, ":=", @(66, 11)}
[174] {INT_LITERAL, "1", @(66, 14)}
[175] {END_OF_EXPRESSION, ";", @(66, 15)}
[176] {LOOP, "loop", @(68, 9)}
[177] {IF, "if", @(69, 13)}
[178] {NOT, "not", @(69, 16)}
[179] {PARENTHESIS_OPEN, "(", @(69, 19)}
[180] {IDENTIFIER, "i", @(69, 20)}
[181] {LESS_THAN, "<", @(69, 22)}
[182] {IDENTIFIER, "n", @(69, 24)}
[183] {PARENTHESIS_CLOSE, ")", @(69, 25)}
[184] {THEN, "then", @(69, 27)}
[185] {EXIT, "exit", @(70, 17)}
[186] {END_OF_EXPRESSION, ";", @(70, 21)}
[187] {ELSEIF, "elseif", @(71, 13)}
[188] {IDENTIFIER, "lst", @(71, 20)}
[189] {BRACKET_OPEN, "[", @(71, 23)}
[190] {IDENTIFIER, "i", @(71, 24)}
[191] {BRACKET_CLOSE, "]", @(71, 25)}
[192] {MORE_THAN, ">", @(71, 27)}
[193] {IDENTIFIER, "largest", @(71, 29)}
[194] {THEN, "then", @(71, 37)}
[195] {IDENTIFIER, "largest", @(72, 17)}
[196] {ASSIGN, ":=", @(72, 25)}
[197] {IDENTIFIER, "lst", @(72, 28)}
[198] {BRACKET_OPEN, "[", @(72, 31)}
[199] {IDENTIFIER, "i", @(72, 32)}
[200] {BRACKET_CLOSE, "]", @(72, 33)}
[201] {END_OF_EXPRESSION, ";", @(72, 34)}
[202] {END, "end", @(73, 13)}
[203] {END_OF_EXPRESSION, ";", @(73, 16)}
[204] {IDENTIFIER, "i", @(74, 13)}
[205] {ASSIGN, ":=", @(74, 15)}
[206] {IDENTIFIER, "i", @(74, 18)}
[207] {PLUS, "+", @(74, 20)}
[208] {INT_LITERAL, "1", @(74, 22)}
[209] {END_OF_EXPRESSION, ";", @(74, 23)}
[210] {END, "end", @(75, 9)}
[211] {END_OF_EXPRESSION, ";", @(75, 12)}
[212] {RETURN, "return", @(77, 9)}
[213] {IDENTIFIER, "largest", @(77, 16)}
[214] {END_OF_EXPRESSION, ";", @(77, 23)}
[215] {END, "end", @(78, 5)}
[216] {END_OF_EXPRESSION, ";", @(78, 8)}
[217] {PROCEDURE, "procedure", @(80, 1)}
[218] {IDENTIFIER, "BubbleSort", @(80, 11)}
[219] {PARENTHESIS_OPEN, "(", @(80, 21)}
[220] {IDENTIFIER, "lst", @(81, 9)}
[221] {TYPE_DECLARE, ":", @(81, 12)}
[222] {LIST, "list", @(81, 14)}
[223] {OF, "of", @(81, 19)}
[224] {INTEGER, "integer", @(81, 22)}
[225] {END_OF_EXPRESSION, ";", @(81, 29)}
[226] {PARENTHESIS_CLOSE, ")", @(82, 5)}
[227] {END_OF_EXPRESSION, ";", @(82, 6)}
[228] {VAR, "var", @(84, 5)}
[229] {IDENTIFIER, "i", @(85, 9)}
[230] {COMMA, ",", @(85, 10)}
[231] {IDENTIFIER, "j", @(85, 12)}
[232] {COMMA, ",", @(85, 13)}
[233] {IDENTIFIER, "t", @(85, 15)}
[234] {COMMA, ",", @(85, 16)}
[235] {IDENTIFIER, "n", @(85, 18)}
[236] {TYPE_DECLARE, ":", @(85, 19)}
[237] {INTEGER, "integer", @(85, 21)}
[238] {END_OF_EXPRESSION, ";", @(85, 28)}
[239] {IDENTIFIER, "swap", @(86, 9)}
[240] {TYPE_DECLARE, ":", @(86, 14)}
[241] {BOOLEAN, "boolean", @(86, 15)}
[242] {END_OF_EXPRESSION, ";", @(86, 22)}
[243] {BEGIN, "begin", @(88, 5)}
[244] {IDENTIFIER, "n", @(89, 9)}
[245] {ASSIGN, ":=", @(89, 11)}
[246] {IDENTIFIER, "LenLstInt", @(89, 14)}
[247] {PARENTHESIS_OPEN, "(", @(89, 23)}
[248] {IDENTIFIER, "lst", @(89, 24)}
[249] {PARENTHESIS_CLOSE, ")", @(89, 27)}
[250] {END_OF_EXPRESSION, ";", @(89, 28)}
[251] {IDENTIFIER, "i", @(90, 9)}
[252] {ASSIGN, ":=", @(90, 11)}
[253] {INT_LITERAL, "0", @(90, 14)}
[254] {END_OF_EXPRESSION, ";", @(90, 15)}
[255] {LOOP, "loop", @(91, 9)}
[256] {IF, "if", @(92, 13)}
[257] {IDENTIFIER, "i", @(92, 16)}
[258] {EQUAL, "=", @(92, 18)}
[259] {IDENTIFIER, "n", @(92, 20)}
[260] {MINUS, "-", @(92, 22)}
[261] {INT_LITERAL, "1", @(92, 24)}
[262] {THEN, "then", @(92, 26)}
[263] {EXIT, "exit", @(92, 31)}
[264] {END_OF_EXPRESSION, ";", @(92, 35)}
[265] {END, "end", @(92, 37)}
[266] {END_OF_EXPRESSION, ";", @(92, 40)}
[267] {IDENTIFIER, "swap", @(93, 13)}
[268] {ASSIGN, ":=", @(93, 18)}
[269] {FALSE, "false", @(93, 21)}
[270] {END_OF_EXPRESSION, ";", @(93, 26)}
[271] {IDENTIFIER, "j", @(94, 13)}
[272] {ASSIGN, ":=", @(94, 15)}
[273] {INT_LITERAL, "0", @(94, 18)}
[274] {END_OF_EXPRESSION, ";", @(94, 19)}
[275] {LOOP, "loop", @(95, 13)}
[276] {IF, "if", @(96, 17)}
[277] {IDENTIFIER, "j", @(96, 20)}
[278] {EQUAL, "=", @(96, 22)}
[279] {IDENTIFIER, "n", @(96, 24)}
[280] {MINUS, "-", @(96, 26)}
[281] {IDENTIFIER, "i", @(96, 28)}
[282] {MINUS, "-", @(96, 30)}
[283] {INT_LITERAL, "1", @(96, 32)}
[284] {THEN, "then", @(96, 34)}
[285] {EXIT, "exit", @(97, 21)}
[286] {END_OF_EXPRESSION, ";", @(97, 25)}
[287] {ELSEIF, "elseif", @(98, 17)}
[288] {IDENTIFIER, "lst", @(98, 24)}
[289] {BRACKET_OPEN, "[", @(98, 27)}
[290] {IDENTIFIER, "j", @(98, 28)}
[291] {PLUS, "+", @(98, 29)}
[292] {INT_LITERAL, "1", @(98, 30)}
[293] {BRACKET_CLOSE, "]", @(98, 31)}
[294] {LESS_THAN, "<", @(98, 33)}
[295] {IDENTIFIER, "lst", @(98, 35)}
[296] {BRACKET_OPEN, "[", @(98, 38)}
[297] {IDENTIFIER, "j", @(98, 39)}
[298] {BRACKET_CLOSE, "]", @(98, 40)}
[299] {THEN, "then", @(98, 42)}
[300] {IDENTIFIER, "t", @(99, 21)}
[301] {ASSIGN, ":=", @(99, 23)}
[302] {IDENTIFIER, "lst", @(99, 26)}
[303] {BRACKET_OPEN, "[", @(99, 29)}
[304] {IDENTIFIER, "j", @(99, 30)}
[305] {BRACKET_CLOSE, "]", @(99, 31)}
[306] {END_OF_EXPRESSION, ";", @(99, 32)}
[307] {IDENTIFIER, "lst", @(100, 21)}
[308] {BRACKET_OPEN, "[", @(100, 24)}
[309] {IDENTIFIER, "j", @(100, 25)}
[310] {BRACKET_CLOSE, "]", @(100, 26)}
[311] {ASSIGN, ":=", @(100, 28)}
[312] {IDENTIFIER, "lst", @(100, 31)}
[313] {BRACKET_OPEN, "[", @(100, 34)}
[314] {IDENTIFIER, "j", @(100, 35)}
[315] {PLUS, "+", @(100, 36)}
[316] {INT_LITERAL, "1", @(100, 37)}
[317] {BRACKET_CLOSE, "]", @(100, 38)}
[318] {END_OF_EXPRESSION, ";", @(100, 39)}
[319] {IDENTIFIER, "lst", @(101, 21)}
[320] {BRACKET_OPEN, "[", @(101, 24)}
[321] {IDENTIFIER, "j", @(101, 25)}
[322] {PLUS, "+", @(101, 26)}
[323] {INT_LITERAL, "1", @(101, 27)}
[324] {BRACKET_CLOSE, "]", @(101, 28)}
[325] {ASSIGN, ":=", @(101, 30)}
[326] {IDENTIFIER, "t", @(101, 33)}
[327] {END_OF_EXPRESSION, ";", @(101, 34)}
[328] {IDENTIFIER, "swap", @(102, 21)}
[329] {ASSIGN, ":=", @(102, 26)}
[330] {TRUE, "true", @(102, 29)}
[331] {END_OF_EXPRESSION, ";", @(102, 33)}
[332] {END, "end", @(103, 17)}
[333] {END_OF_EXPRESSION, ";", @(103, 20)}
[334] {IDENTIFIER, "j", @(104, 17)}
[335] {ASSIGN, ":=", @(104, 19)}
[336] {IDENTIFIER, "j", @(104, 22)}
[337] {PLUS, "+", @(104, 24)}
[338] {INT_LITERAL, "1", @(104, 26)}
[339] {END_OF_EXPRESSION, ";", @(104, 27)}
[340] {END, "end", @(105, 13)}
[341] {END_OF_EXPRESSION, ";", @(105, 16)}
[342] {IF, "if", @(106, 13)}
[343] {NOT, "not", @(106, 16)}
[344] {IDENTIFIER, "swap", @(106, 20)}
[345] {THEN, "then", @(106, 25)}
[346] {EXIT, "exit", @(106, 30)}
[347] {END_OF_EXPRESSION, ";", @(106, 34)}
[348] {END, "end", @(106, 36)}
[349] {END_OF_EXPRESSION, ";", @(106, 39)}
[350] {IDENTIFIER, "i", @(107, 13)}
[351] {ASSIGN, ":=", @(107, 15)}
[352] {IDENTIFIER, "i", @(107, 18)}
[353] {PLUS, "+", @(107, 20)}
[354] {INT_LITERAL, "1", @(107, 22)}
[355] {END_OF_EXPRESSION, ";", @(107, 23)}
[356] {END, "end", @(108, 9)}
[357] {END_OF_EXPRESSION, ";", @(108, 12)}
[358] {END, "end", @(109, 5)}
[359] {END_OF_EXPRESSION, ";", @(109, 8)}
[360] {PROGRAM, "program", @(111, 1)}
[361] {IDENTIFIER, "lst", @(112, 5)}
[362] {ASSIGN, ":=", @(112, 9)}
[363] {CURLY_OPEN, "{", @(112, 12)}
[364] {INT_LITERAL, "73", @(113, 9)}
[365] {COMMA, ",", @(113, 11)}
[366] {INT_LITERAL, "77", @(113, 13)}
[367] {COMMA, ",", @(113, 15)}
[368] {INT_LITERAL, "56", @(113, 17)}
[369] {COMMA, ",", @(113, 19)}
[370] {INT_LITERAL, "10", @(113, 21)}
[371] {COMMA, ",", @(113, 23)}
[372] {INT_LITERAL, "14", @(113, 25)}
[373] {COMMA, ",", @(113, 27)}
[374] {INT_LITERAL, "54", @(114, 9)}
[375] {COMMA, ",", @(114, 11)}
[376] {INT_LITERAL, "75", @(114, 13)}
[377] {COMMA, ",", @(114, 15)}
[378] {INT_LITERAL, "62", @(114, 17)}
[379] {COMMA, ",", @(114, 19)}
[380] {INT_LITERAL, "71", @(114, 21)}
[381] {COMMA, ",", @(114, 23)}
[382] {INT_LITERAL, "10", @(114, 25)}
[383] {COMMA, ",", @(114, 27)}
[384] {INT_LITERAL, "3", @(115, 10)}
[385] {COMMA, ",", @(115, 11)}
[386] {INT_LITERAL, "71", @(115, 13)}
[387] {COMMA, ",", @(115, 15)}
[388] {INT_LITERAL, "16", @(115, 17)}
[389] {COMMA, ",", @(115, 19)}
[390] {INT_LITERAL, "49", @(115, 21)}
[391] {COMMA, ",", @(115, 23)}
[392] {INT_LITERAL, "66", @(115, 25)}
[393] {COMMA, ",", @(115, 27)}
[394] {INT_LITERAL, "91", @(116, 9)}
[395] {COMMA, ",", @(116, 11)}
[396] {INT_LITERAL, "69", @(116, 13)}
[397] {COMMA, ",", @(116, 15)}
[398] {INT_LITERAL, "62", @(116, 17)}
[399] {COMMA, ",", @(116, 19)}
[400] {INT_LITERAL, "25", @(116, 21)}
[401] {COMMA, ",", @(116, 23)}
[402] {INT_LITERAL, "65", @(116, 25)}
[403] {CURLY_CLOSE, "}", @(117, 5)}
[404] {END_OF_EXPRESSION, ";", @(117, 6)}
[405] {IDENTIFIER, "Print", @(118, 5)}
[406] {PARENTHESIS_OPEN, "(", @(118, 10)}
[407] {IDENTIFIER, "lst", @(118, 11)}
[408] {PARENTHESIS_CLOSE, ")", @(118, 14)}
[409] {END_OF_EXPRESSION, ";", @(118, 15)}
[410] {IDENTIFIER, "WrLn", @(119, 5)}
[411] {PARENTHESIS_OPEN, "(", @(119, 9)}
[412] {PARENTHESIS_CLOSE, ")", @(119, 10)}
[413] {END_OF_EXPRESSION, ";", @(119, 11)}
[414] {IDENTIFIER, "one", @(120, 5)}
[415] {ASSIGN, ":=", @(120, 9)}
[416] {IDENTIFIER, "Sum", @(120, 12)}
[417] {PARENTHESIS_OPEN, "(", @(120, 15)}
[418] {IDENTIFIER, "lst", @(120, 16)}
[419] {PARENTHESIS_CLOSE, ")", @(120, 19)}
[420] {END_OF_EXPRESSION, ";", @(120, 20)}
[421] {IDENTIFIER, "two", @(121, 5)}
[422] {ASSIGN, ":=", @(121, 9)}
[423] {IDENTIFIER, "Max", @(121, 12)}
[424] {PARENTHESIS_OPEN, "(", @(121, 15)}
[425] {IDENTIFIER, "lst", @(121, 16)}
[426] {PARENTHESIS_CLOSE, ")", @(121, 19)}
[427] {END_OF_EXPRESSION, ";", @(121, 20)}
[428] {IDENTIFIER, "WrInt", @(122, 5)}
[429] {PARENTHESIS_OPEN, "(", @(122, 10)}
[430] {IDENTIFIER, "one", @(122, 11)}
[431] {PARENTHESIS_CLOSE, ")", @(122, 14)}
[432] {END_OF_EXPRESSION, ";", @(122, 15)}
[433] {IDENTIFIER, "WrLn", @(123, 5)}
[434] {PARENTHESIS_OPEN, "(", @(123, 9)}
[435] {PARENTHESIS_CLOSE, ")", @(123, 10)}
[436] {END_OF_EXPRESSION, ";", @(123, 11)}
[437] {IDENTIFIER, "WrInt", @(124, 5)}
[438] {PARENTHESIS_OPEN, "(", @(124, 10)}
[439] {IDENTIFIER, "two", @(124, 11)}
[440] {PARENTHESIS_CLOSE, ")", @(124, 14)}
[441] {END_OF_EXPRESSION, ";", @(124, 15)}
[442] {IDENTIFIER, "WrLn", @(125, 5)}
[443] {PARENTHESIS_OPEN, "(", @(125, 9)}
[444] {PARENTHESIS_CLOSE, ")", @(125, 10)}
[445] {END_OF_EXPRESSION, ";", @(125, 11)}
[446] {IDENTIFIER, "BubbleSort", @(126, 5)}
[447] {PARENTHESIS_OPEN, "(", @(126, 15)}
[448] {IDENTIFIER, "lst", @(126, 16)}
[449] {PARENTHESIS_CLOSE, ")", @(126, 19)}
[450] {END_OF_EXPRESSION, ";", @(126, 20)}
[451] {IDENTIFIER, "Print", @(127, 5)}
[452] {PARENTHESIS_OPEN, "(", @(127, 10)}
[453] {IDENTIFIER, "lst", @(127, 11)}
[454] {PARENTHESIS_CLOSE, ")", @(127, 14)}
[455] {END_OF_EXPRESSION, ";", @(127, 15)}
[456] {IDENTIFIER, "WrLn", @(128, 5)}
[457] {PARENTHESIS_OPEN, "(", @(128, 9)}
[458] {PARENTHESIS_CLOSE, ")", @(128, 10)}
[459] {END_OF_EXPRESSION, ";", @(128, 11)}
[460] {END, "end", @(129, 1)}
[461] {END_OF_EXPRESSION, ";", @(129, 4)}
[462] {EOF, "", @(130, 1)}

===== Tokens from: "test_programs/palindrome.chimera" =====
[1] {VAR, "var", @(6, 1)}
[2] {IDENTIFIER, "str", @(7, 5)}
[3] {COMMA, ",", @(7, 8)}
[4] {IDENTIFIER, "option", @(7, 10)}
[5] {TYPE_DECLARE, ":", @(7, 16)}
[6] {STRING, "string", @(7, 18)}
[7] {END_OF_EXPRESSION, ";", @(7, 24)}
[8] {PROCEDURE, "procedure", @(9, 1)}
[9] {IDENTIFIER, "IsPalindrome", @(9, 11)}
[10] {PARENTHESIS_OPEN, "(", @(9, 23)}
[11] {IDENTIFIER, "str", @(10, 9)}
[12] {TYPE_DECLARE, ":", @(10, 12)}
[13] {STRING, "string", @(10, 14)}
[14] {END_OF_EXPRESSION, ";", @(10, 20)}
[15] {PARENTHESIS_CLOSE, ")", @(11, 5)}
[16] {TYPE_DECLARE, ":", @(11, 6)}
[17] {BOOLEAN, "boolean", @(11, 8)}
[18] {END_OF_EXPRESSION, ";", @(11, 15)}
[19] {VAR, "var", @(13, 5)}
[20] {IDENTIFIER, "start", @(14, 9)}
[21] {COMMA, ",", @(14, 14)}
[22] {IDENTIFIER, "finish", @(14, 16)}
[23] {TYPE_DECLARE, ":", @(14, 22)}
[24] {INTEGER, "integer", @(14, 24)}
[25] {END_OF_EXPRESSION, ";", @(14, 31)}
[26] {BEGIN, "begin", @(16, 5)}
[27] {IDENTIFIER, "start", @(17, 9)}
[28] {ASSIGN, ":=", @(17, 15)}
[29] {INT_LITERAL, "0", @(17, 18)}
[30] {END_OF_EXPRESSION, ";", @(17, 19)}
[31] {IDENTIFIER, "finish", @(18, 9)}
[32] {ASSIGN, ":=", @(18, 16)}
[33] {IDENTIFIER, "LenStr", @(18, 19)}
[34] {PARENTHESIS_OPEN, "(", @(18, 25)}
[35] {IDENTIFIER, "str", @(18, 26)}
[36] {PARENTHESIS_CLOSE, ")", @(18, 29)}
[37] {MINUS, "-", @(18, 31)}
[38] {INT_LITERAL, "1", @(18, 33)}
[39] {END_OF_EXPRESSION, ";", @(18, 34)}
[40] {LOOP, "loop", @(20, 9)}
[41] {IF, "if", @(21, 13)}
[42] {IDENTIFIER, "start", @(21, 16)}
[43] {MORE_THAN, ">", @(21, 22)}
[44] {IDENTIFIER, "finish", @(21, 24)}
[45] {THEN, "then", @(21, 31)}
[46] {EXIT, "exit", @(21, 36)}
[47] {END_OF_EXPRESSION, ";", @(21, 40)}
[48] {END, "end", @(21, 42)}
[49] {END_OF_EXPRESSION, ";", @(21, 45)}
[50] {IF, "if", @(22, 13)}
[51] {IDENTIFIER, "CmpStr", @(22, 16)}
[52] {PARENTHESIS_OPEN, "(", @(22, 22)}
[53] {IDENTIFIER, "AtStr", @(22, 23)}
[54] {PARENTHESIS_OPEN, "(", @(22, 28)}
[55] {IDENTIFIER, "str", @(22, 29)}
[56] {COMMA, ",", @(22, 32)}
[57] {IDENTIFIER, "start", @(22, 34)}
[58] {PARENTHESIS_CLOSE, ")", @(22, 39)}
[59] {COMMA, ",", @(22, 40)}
[60] {IDENTIFIER, "AtStr", @(22, 42)}
[61] {PARENTHESIS_OPEN, "(", @(22, 47)}
[62] {IDENTIFIER, "str", @(22, 48)}
[63] {COMMA, ",", @(22, 51)}
[64] {IDENTIFIER, "finish", @(22, 53)}
[65] {PARENTHESIS_CLOSE, ")", @(22, 59)}
[66] {PARENTHESIS_CLOSE, ")", @(22, 60)}
[67] {UNEQUAL, "<>", @(22, 62)}
[68] {INT_LITERAL, "0", @(22, 65)}
[69] {THEN, "then", @(22, 67)}
[70] {RETURN, "return", @(23, 17)}
[71] {FALSE, "false", @(23, 24)}
[72] {END_OF_EXPRESSION, ";", @(23, 29)}
[73] {END, "end", @(24, 13)}
[74] {END_OF_EXPRESSION, ";", @(24, 16)}
[75] {IDENTIFIER, "start", @(25, 13)}
[76] {ASSIGN, ":=", @(25, 19)}
[77] {IDENTIFIER, "start", @(25, 22)}
[78] {PLUS, "+", @(25, 28)}
[79] {INT_LITERAL, "1", @(25, 30)}
[80] {END_OF_EXPRESSION, ";", @(25, 31)}
[81] {IDENTIFIER, "finish", @(26, 13)}
[82] {ASSIGN, ":=", @(26, 20)}
[83] {IDENTIFIER, "finish", @(26, 23)}
[84] {MINUS, "-", @(26, 30)}
[85] {INT_LITERAL, "1", @(26, 32)}
[86] {END_OF_EXPRESSION, ";", @(26, 33)}
[87] {END, "end", @(27, 9)}
[88] {END_OF_EXPRESSION, ";", @(27, 12)}
[89] {RETURN, "return", @(29, 9)}
[90] {TRUE, "true", @(29, 16)}
[91] {END_OF_EXPRESSION, ";", @(29, 20)}
[92] {END, "end", @(30, 5)}
[93] {END_OF_EXPRESSION, ";", @(30, 8)}
[94] {PROGRAM, "program", @(32, 1)}
[95] {LOOP, "loop", @(33, 5)}
[96] {IDENTIFIER, "WrStr", @(34, 9)}
[97] {PARENTHESIS_OPEN, "(", @(34, 14)}
[98] {STRING_LITERAL, ""Input a string: "", @(34, 15)}
[99] {PARENTHESIS_CLOSE, ")", @(34, 33)}
[100] {END_OF_EXPRESSION, ";", @(34, 34)}
[101] {IDENTIFIER, "str", @(35, 9)}
[102] {ASSIGN, ":=", @(35, 13)}
[103] {IDENTIFIER, "RdStr", @(35, 16)}
[104] {PARENTHESIS_OPEN, "(", @(35, 21)}
[105] {PARENTHESIS_CLOSE, ")", @(35, 22)}
[106] {END_OF_EXPRESSION, ";", @(35, 23)}
[107] {IF, "if", @(37, 9)}
[108] {IDENTIFIER, "IsPalindrome", @(37, 12)}
[109] {PARENTHESIS_OPEN, "(", @(37, 24)}
[110] {IDENTIFIER, "str", @(37, 25)}
[111] {PARENTHESIS_CLOSE, ")", @(37, 28)}
[112] {THEN, "then", @(37, 30)}
[113] {IDENTIFIER, "WrStr", @(38, 13)}
[114] {PARENTHESIS_OPEN, "(", @(38, 18)}
[115] {IDENTIFIER, "CatStr", @(38, 19)}
[116] {PARENTHESIS_OPEN, "(", @(38, 25)}
[117] {STRING_LITERAL, ""The string """", @(38, 26)}
[118] {COMMA, ",", @(38, 41)}
[119] {IDENTIFIER, "CatStr", @(38, 43)}
[120] {PARENTHESIS_OPEN, "(", @(38, 49)}
[121] {IDENTIFIER, "str", @(38, 50)}
[122] {COMMA, ",", @(38, 53)}
[123] {STRING_LITERAL, """" is a palindrome."", @(38, 55)}
[124] {PARENTHESIS_CLOSE, ")", @(38, 76)}
[125] {PARENTHESIS_CLOSE, ")", @(38, 77)}
[126] {PARENTHESIS_CLOSE, ")", @(38, 78)}
[127] {END_OF_EXPRESSION, ";", @(38, 79)}
[128] {ELSE, "else", @(39, 9)}
[129] {IDENTIFIER, "WrStr", @(40, 13)}
[130] {PARENTHESIS_OPEN, "(", @(40, 18)}
[131] {IDENTIFIER, "CatStr", @(40, 19)}
[132] {PARENTHESIS_OPEN, "(", @(40, 25)}
[133] {STRING_LITERAL, ""The string """", @(40, 26)}
[134] {COMMA, ",", @(40, 41)}
[135] {IDENTIFIER, "CatStr", @(40, 43)}
[136] {PARENTHESIS_OPEN, "(", @(40, 49)}
[137] {IDENTIFIER, "str", @(40, 50)}
[138] {COMMA, ",", @(40, 53)}
[139] {STRING_LITERAL, """" is NOT a palindrome."", @(40, 55)}
[140] {PARENTHESIS_CLOSE, ")", @(40, 80)}
[141] {PARENTHESIS_CLOSE, ")", @(40, 81)}
[142] {PARENTHESIS_CLOSE, ")", @(40, 82)}
[143] {END_OF_EXPRESSION, ";", @(40, 83)}
[144] {END, "end", @(41, 9)}
[145] {END_OF_EXPRESSION, ";", @(41, 12)}
[146] {IDENTIFIER, "WrLn", @(43, 9)}
[147] {PARENTHESIS_OPEN, "(", @(43, 13)}
[148] {PARENTHESIS_CLOSE, ")", @(43, 14)}
[149] {END_OF_EXPRESSION, ";", @(43, 15)}
[150] {IDENTIFIER, "WrStr", @(45, 9)}
[151] {PARENTHESIS_OPEN, "(", @(45, 14)}
[152] {STRING_LITERAL, ""Check another string? "", @(45, 15)}
[153] {PARENTHESIS_CLOSE, ")", @(45, 39)}
[154] {END_OF_EXPRESSION, ";", @(45, 40)}
[155] {IDENTIFIER, "option", @(46, 9)}
[156] {ASSIGN, ":=", @(46, 16)}
[157] {IDENTIFIER, "RdStr", @(46, 19)}
[158] {PARENTHESIS_OPEN, "(", @(46, 24)}
[159] {PARENTHESIS_CLOSE, ")", @(46, 25)}
[160] {END_OF_EXPRESSION, ";", @(46, 26)}
[161] {IF, "if", @(48, 9)}
[162] {IDENTIFIER, "LenStr", @(48, 12)}
[163] {PARENTHESIS_OPEN, "(", @(48, 18)}
[164] {IDENTIFIER, "option", @(48, 19)}
[165] {PARENTHESIS_CLOSE, ")", @(48, 25)}
[166] {EQUAL, "=", @(48, 27)}
[167] {INT_LITERAL, "0", @(48, 29)}
[168] {THEN, "then", @(48, 31)}
[169] {IDENTIFIER, "option", @(49, 13)}
[170] {ASSIGN, ":=", @(49, 20)}
[171] {STRING_LITERAL, ""N"", @(49, 23)}
[172] {END_OF_EXPRESSION, ";", @(49, 26)}
[173] {ELSE, "else", @(50, 9)}
[174] {IDENTIFIER, "option", @(51, 13)}
[175] {ASSIGN, ":=", @(51, 20)}
[176] {IDENTIFIER, "AtStr", @(51, 23)}
[177] {PARENTHESIS_OPEN, "(", @(51, 28)}
[178] {IDENTIFIER, "option", @(51, 29)}
[179] {COMMA, ",", @(51, 35)}
[180] {INT_LITERAL, "0", @(51, 37)}
[181] {PARENTHESIS_CLOSE, ")", @(51, 38)}
[182] {END_OF_EXPRESSION, ";", @(51, 39)}
[183] {END, "end", @(52, 9)}
[184] {END_OF_EXPRESSION, ";", @(52, 12)}
[185] {IF, "if", @(54, 9)}
[186] {IDENTIFIER, "CmpStr", @(54, 12)}
[187] {PARENTHESIS_OPEN, "(", @(54, 18)}
[188] {IDENTIFIER, "option", @(54, 19)}
[189] {COMMA, ",", @(54, 25)}
[190] {STRING_LITERAL, ""Y"", @(54, 27)}
[191] {PARENTHESIS_CLOSE, ")", @(54, 30)}
[192] {UNEQUAL, "<>", @(54, 32)}
[193] {INT_LITERAL, "0", @(54, 35)}
[194] {AND, "and", @(54, 37)}
[195] {IDENTIFIER, "CmpStr", @(54, 41)}
[196] {PARENTHESIS_OPEN, "(", @(54, 47)}
[197] {IDENTIFIER, "option", @(54, 48)}
[198] {COMMA, ",", @(54, 54)}
[199] {STRING_LITERAL, ""y"", @(54, 56)}
[200] {PARENTHESIS_CLOSE, ")", @(54, 59)}
[201] {UNEQUAL, "<>", @(54, 61)}
[202] {INT_LITERAL, "0", @(54, 64)}
[203] {THEN, "then", @(54, 66)}
[204] {EXIT, "exit", @(55, 13)}
[205] {END_OF_EXPRESSION, ";", @(55, 17)}
[206] {END, "end", @(56, 9)}
[207] {END_OF_EXPRESSION, ";", @(56, 12)}
[208] {END, "end", @(57, 5)}
[209] {END_OF_EXPRESSION, ";", @(57, 8)}
[210] {END, "end", @(58, 1)}
[211] {END_OF_EXPRESSION, ";", @(58, 4)}
[212] {EOF, "", @(59, 1)}

===== Tokens from: "test_programs/raw_symbols_list.chimera" =====
[1] {END_OF_EXPRESSION, ";", @(1, 1)}
[2] {ASSIGN, ":=", @(2, 1)}
[3] {COMMA, ",", @(3, 1)}
[4] {TYPE_DECLARE, ":", @(4, 1)}
[5] {PARENTHESIS_OPEN, "(", @(5, 1)}
[6] {PARENTHESIS_CLOSE, ")", @(6, 1)}
[7] {CURLY_OPEN, "{", @(7, 1)}
[8] {CURLY_CLOSE, "}", @(8, 1)}
[9] {BRACKET_OPEN, "[", @(9, 1)}
[10] {BRACKET_CLOSE, "]", @(10, 1)}
[11] {PLUS, "+", @(11, 1)}
[12] {MINUS, "-", @(12, 1)}
[13] {TIMES, "*", @(13, 1)}
[14] {DIV, "div", @(14, 1)}
[15] {REM, "rem", @(15, 1)}
[16] {EQUAL, "=", @(16, 1)}
[17] {UNEQUAL, "<>", @(17, 1)}
[18] {LESS_THAN, "<", @(18, 1)}
[19] {MORE_THAN, ">", @(19, 1)}
[20] {LESS_THAN_EQUAL, "<=", @(20, 1)}
[21] {MORE_THAN_EQUAL, ">=", @(21, 1)}
[22] {NOT, "not", @(22, 1)}
[23] {ILLEGAL_CHAR, "_", @(23, 1)}
[24] {IDENTIFIER, "hola", @(23, 2)}
[25] {INT_LITERAL, "999", @(24, 1)}
[26] {IDENTIFIER, "jo", @(24, 4)}
[27] {INT_LITERAL, "939", @(25, 1)}
[28] {INT_LITERAL, "89", @(26, 1)}
[29] {MINUS, "-", @(26, 3)}
[30] {ILLEGAL_CHAR, "_", @(27, 1)}
[31] {INT_LITERAL, "99", @(27, 2)}
[32] {IDENTIFIER, "abc99", @(28, 1)}
[33] {IDENTIFIER, "hh", @(29, 1)}
[34] {IDENTIFIER, "k", @(30, 1)}
[35] {CONST, "const", @(31, 1)}
[36] {VAR, "var", @(32, 1)}
[37] {PROGRAM, "program", @(33, 1)}
[38] {END, "end", @(34, 1)}
[39] {INTEGER, "integer", @(35, 1)}
[40] {BOOLEAN, "boolean", @(36, 1)}
[41] {STRING, "string", @(37, 1)}
[42] {LIST, "list", @(38, 1)}
[43] {OF, "of", @(39, 1)}
[44] {PROCEDURE, "procedure", @(40, 1)}
[45] {BEGIN, "begin", @(41, 1)}
[46] {IF, "if", @(42, 1)}
[47] {THEN, "then", @(43, 1)}
[48] {ELSE, "else", @(44, 1)}
[49] {LOOP, "loop", @(45, 1)}
[50] {FOR, "for", @(46, 1)}
[51] {IN, "in", @(47, 1)}
[52] {DO, "do", @(48, 1)}
[53] {RETURN, "return", @(49, 1)}
[54] {EXIT, "exit", @(50, 1)}
[55] {AND, "and", @(51, 1)}
[56] {OR, "or", @(52, 1)}
[57] {XOR, "xor", @(53, 1)}
[58] {TRUE, "true", @(54, 1)}
[59] {FALSE, "false", @(55, 1)}
[60] {STRING_LITERAL, ""this is a string"", @(56, 1)}
[61] {STRING_LITERAL, ""this is another ""string"""", @(57, 1)}
[62] {STRING_LITERAL, ""this is another one"", @(58, 1)}
[63] {IDENTIFIER, "not_string", @(58, 22)}
[64] {STRING_LITERAL, """", @(58, 32)}
[65] {ILLEGAL_CHAR, """, @(58, 34)}
[66] {STRING_LITERAL, ""/*should appear*/"", @(59, 1)}
[67] {STRING_LITERAL, ""//should appear"", @(60, 1)}
[68] {IDENTIFIER, "appear", @(66, 13)}
[69] {TIMES, "*", @(67, 1)}
[70] {ILLEGAL_CHAR, "/", @(67, 2)}
[71] {EOF, "", @(68, 1)}

===== Tokens from: "test_programs/variables.chimera" =====
[1] {CONST, "const", @(6, 1)}
[2] {IDENTIFIER, "konstant", @(7, 5)}
[3] {ASSIGN, ":=", @(7, 14)}
[4] {INT_LITERAL, "1", @(7, 17)}
[5] {END_OF_EXPRESSION, ";", @(7, 18)}
[6] {VAR, "var", @(9, 1)}
[7] {IDENTIFIER, "x", @(10, 5)}
[8] {COMMA, ",", @(10, 6)}
[9] {IDENTIFIER, "y", @(10, 8)}
[10] {TYPE_DECLARE, ":", @(10, 9)}
[11] {INTEGER, "integer", @(10, 11)}
[12] {END_OF_EXPRESSION, ";", @(10, 18)}
[13] {PROCEDURE, "procedure", @(12, 1)}
[14] {IDENTIFIER, "F", @(12, 11)}
[15] {PARENTHESIS_OPEN, "(", @(12, 12)}
[16] {IDENTIFIER, "b", @(13, 9)}
[17] {TYPE_DECLARE, ":", @(13, 10)}
[18] {BOOLEAN, "boolean", @(13, 12)}
[19] {END_OF_EXPRESSION, ";", @(13, 19)}
[20] {IDENTIFIER, "z", @(14, 9)}
[21] {TYPE_DECLARE, ":", @(14, 10)}
[22] {INTEGER, "integer", @(14, 12)}
[23] {END_OF_EXPRESSION, ";", @(14, 19)}
[24] {PARENTHESIS_CLOSE, ")", @(15, 5)}
[25] {END_OF_EXPRESSION, ";", @(15, 6)}
[26] {CONST, "const", @(17, 5)}
[27] {IDENTIFIER, "konstant", @(18, 9)}
[28] {ASSIGN, ":=", @(18, 18)}
[29] {INT_LITERAL, "1000", @(18, 21)}
[30] {END_OF_EXPRESSION, ";", @(18, 25)}
[31] {VAR, "var", @(20, 5)}
[32] {IDENTIFIER, "x", @(21, 9)}
[33] {TYPE_DECLARE, ":", @(21, 10)}
[34] {INTEGER, "integer", @(21, 12)}
[35] {END_OF_EXPRESSION, ";", @(21, 19)}
[36] {BEGIN, "begin", @(23, 5)}
[37] {IDENTIFIER, "WrBool", @(24, 9)}
[38] {PARENTHESIS_OPEN, "(", @(24, 15)}
[39] {IDENTIFIER, "b", @(24, 16)}
[40] {PARENTHESIS_CLOSE, ")", @(24, 17)}
[41] {END_OF_EXPRESSION, ";", @(24, 18)}
[42] {IDENTIFIER, "WrLn", @(25, 9)}
[43] {PARENTHESIS_OPEN, "(", @(25, 13)}
[44] {PARENTHESIS_CLOSE, ")", @(25, 14)}
[45] {END_OF_EXPRESSION, ";", @(25, 15)}
[46] {IDENTIFIER, "WrInt", @(26, 9)}
[47] {PARENTHESIS_OPEN, "(", @(26, 14)}
[48] {IDENTIFIER, "z", @(26, 15)}
[49] {PARENTHESIS_CLOSE, ")", @(26, 16)}
[50] {END_OF_EXPRESSION, ";", @(26, 17)}
[51] {IDENTIFIER, "WrLn", @(27, 9)}
[52] {PARENTHESIS_OPEN, "(", @(27, 13)}
[53] {PARENTHESIS_CLOSE, ")", @(27, 14)}
[54] {END_OF_EXPRESSION, ";", @(27, 15)}
[55] {IDENTIFIER, "x", @(29, 9)}
[56] {ASSIGN, ":=", @(29, 11)}
[57] {IDENTIFIER, "x", @(29, 14)}
[58] {PLUS, "+", @(29, 16)}
[59] {IDENTIFIER, "konstant", @(29, 18)}
[60] {END_OF_EXPRESSION, ";", @(29, 26)}
[61] {IDENTIFIER, "y", @(30, 9)}
[62] {ASSIGN, ":=", @(30, 11)}
[63] {IDENTIFIER, "y", @(30, 14)}
[64] {PLUS, "+", @(30, 16)}
[65] {IDENTIFIER, "konstant", @(30, 18)}
[66] {END_OF_EXPRESSION, ";", @(30, 26)}
[67] {IDENTIFIER, "WrInt", @(31, 9)}
[68] {PARENTHESIS_OPEN, "(", @(31, 14)}
[69] {IDENTIFIER, "x", @(31, 15)}
[70] {PARENTHESIS_CLOSE, ")", @(31, 16)}
[71] {END_OF_EXPRESSION, ";", @(31, 17)}
[72] {IDENTIFIER, "WrLn", @(32, 9)}
[73] {PARENTHESIS_OPEN, "(", @(32, 13)}
[74] {PARENTHESIS_CLOSE, ")", @(32, 14)}
[75] {END_OF_EXPRESSION, ";", @(32, 15)}
[76] {IDENTIFIER, "WrInt", @(33, 9)}
[77] {PARENTHESIS_OPEN, "(", @(33, 14)}
[78] {IDENTIFIER, "y", @(33, 15)}
[79] {PARENTHESIS_CLOSE, ")", @(33, 16)}
[80] {END_OF_EXPRESSION, ";", @(33, 17)}
[81] {IDENTIFIER, "WrLn", @(34, 9)}
[82] {PARENTHESIS_OPEN, "(", @(34, 13)}
[83] {PARENTHESIS_CLOSE, ")", @(34, 14)}
[84] {END_OF_EXPRESSION, ";", @(34, 15)}
[85] {END, "end", @(35, 5)}
[86] {END_OF_EXPRESSION, ";", @(35, 8)}
[87] {PROCEDURE, "procedure", @(37, 1)}
[88] {IDENTIFIER, "G", @(37, 11)}
[89] {PARENTHESIS_OPEN, "(", @(37, 12)}
[90] {PARENTHESIS_CLOSE, ")", @(37, 13)}
[91] {END_OF_EXPRESSION, ";", @(37, 14)}
[92] {VAR, "var", @(39, 5)}
[93] {IDENTIFIER, "y", @(40, 9)}
[94] {TYPE_DECLARE, ":", @(40, 10)}
[95] {INTEGER, "integer", @(40, 12)}
[96] {END_OF_EXPRESSION, ";", @(40, 19)}
[97] {BEGIN, "begin", @(42, 5)}
[98] {IDENTIFIER, "x", @(43, 9)}
[99] {ASSIGN, ":=", @(43, 11)}
[100] {IDENTIFIER, "x", @(43, 14)}
[101] {PLUS, "+", @(43, 16)}
[102] {IDENTIFIER, "konstant", @(43, 18)}
[103] {END_OF_EXPRESSION, ";", @(43, 26)}
[104] {IDENTIFIER, "y", @(44, 9)}
[105] {ASSIGN, ":=", @(44, 11)}
[106] {IDENTIFIER, "y", @(44, 14)}
[107] {PLUS, "+", @(44, 16)}
[108] {IDENTIFIER, "konstant", @(44, 18)}
[109] {END_OF_EXPRESSION, ";", @(44, 26)}
[110] {IDENTIFIER, "WrInt", @(45, 9)}
[111] {PARENTHESIS_OPEN, "(", @(45, 14)}
[112] {IDENTIFIER, "x", @(45, 15)}
[113] {PARENTHESIS_CLOSE, ")", @(45, 16)}
[114] {END_OF_EXPRESSION, ";", @(45, 17)}
[115] {IDENTIFIER, "WrLn", @(46, 9)}
[116] {PARENTHESIS_OPEN, "(", @(46, 13)}
[117] {PARENTHESIS_CLOSE, ")", @(46, 14)}
[118] {END_OF_EXPRESSION, ";", @(46, 15)}
[119] {IDENTIFIER, "WrInt", @(47, 9)}
[120] {PARENTHESIS_OPEN, "(", @(47, 14)}
[121] {IDENTIFIER, "y", @(47, 15)}
[122] {PARENTHESIS_CLOSE, ")", @(47, 16)}
[123] {END_OF_EXPRESSION, ";", @(47, 17)}
[124] {IDENTIFIER, "WrLn", @(48, 9)}
[125] {PARENTHESIS_OPEN, "(", @(48, 13)}
[126] {PARENTHESIS_CLOSE, ")", @(48, 14)}
[127] {END_OF_EXPRESSION, ";", @(48, 15)}
[128] {IDENTIFIER, "F", @(49, 9)}
[129] {PARENTHESIS_OPEN, "(", @(49, 10)}
[130] {FALSE, "false", @(49, 11)}
[131] {COMMA, ",", @(49, 16)}
[132] {INT_LITERAL, "5", @(49, 18)}
[133] {PARENTHESIS_CLOSE, ")", @(49, 19)}
[134] {END_OF_EXPRESSION, ";", @(49, 20)}
[135] {END, "end", @(50, 5)}
[136] {END_OF_EXPRESSION, ";", @(50, 8)}
[137] {PROGRAM, "program", @(52, 1)}
[138] {IDENTIFIER, "G", @(53, 5)}
[139] {PARENTHESIS_OPEN, "(", @(53, 6)}
[140] {PARENTHESIS_CLOSE, ")", @(53, 7)}
[141] {END_OF_EXPRESSION, ";", @(53, 8)}
[142] {END, "end", @(54, 1)}
[143] {END_OF_EXPRESSION, ";", @(54, 4)}
[144] {EOF, "", @(55, 1)}
